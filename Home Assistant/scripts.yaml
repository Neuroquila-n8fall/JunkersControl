mqtt_set_heatingparameters:
  alias: Set Parameters for Heating
  icon: mdi:send
  sequence:
    - service: mqtt.publish
      data:
        # Note: Adapt to your topic definition
        topic: cerasmarter/heating/parameters
        payload_template: '{
          "Enabled": {{ iif(is_state(''input_boolean.heizung_betrieb'', ''on''), 1, 0) }},
          "FeedSetpoint": {{ states(''input_number.heizung_sollvorlauf_manuell'') | int(default=0) }},
          "FeedBaseSetpoint": {{ states(''input_number.heizung_fusspunkt'') | int(default=0)  }},
          "FeedCutOff": {{ states(''input_number.heizung_endpunkt'') | int(default=0)  }},
          "FeedMinimum": {{ states(''input_number.heizung_minimum'') | int(default=0)  }},
          "AuxilaryTemperature": {{ states(''sensor.temperatur_und_luftfeuchte_aussen_actual_temperature'') | float(default=0)  }},
          "AmbientTemperature": {{ state_attr(''climate.thermostat_og_kochen_und_essen'',''current_temperature'') | float(default=0) }},
          "TargetAmbientTemperature": {{ states(''input_number.heizung_zieltemperatur'') | float(default=0)  }},
          "OnDemandBoost": {{ iif(is_state(''input_boolean.heizung_boost'', ''on''), 1, 0) }},
          "OnDemandBoostDuration": {{ states(''input_number.heizung_boostdauer'') | int(default=0)  }},
          "FastHeatup": {{ iif(is_state(''input_boolean.heizung_fastheatup'', ''on''), 1, 0) }},
          "Adaption": {{ states(''input_number.heizung_adaption'') | int(default=0)  }},
          "ValveScaling": {{ iif(is_state(''input_boolean.heizung_ventilskalierung'', ''on''), 1, 0) }},
          "ValveScalingMaxOpening": {{ states(''input_number.heizung_ventilskalierung_max'') | int(default=0)  }},
          "ValveScalingOpening": {{ states(''sensor.ventiloffnung_minmax'') | int(default=0)  }},
          "DynamicAdaption": {{ iif(is_state(''input_boolean.heizung_dynamicadaption'', ''on''), 1, 0) }},
          "OverrideSetpoint": {{ iif(is_state(''input_boolean.heizung_override'', ''on''), 1, 0) }} }'